// import_products.js
import fs from "fs";
import path from "path";
import { PrismaClient } from "@prisma/client";
import csv from "csv-parser";

const prisma = new PrismaClient();

// ‚úÖ S√©curise le chemin du fichier
function safeFilePath(filePath) {
  const baseDir = path.resolve("./imports"); // dossier autoris√©
  const absPath = path.resolve(filePath);

  if (!absPath.startsWith(baseDir)) {
    throw new Error("‚ùå Fichier non autoris√© (path traversal d√©tect√©)");
  }
  if (path.extname(absPath) !== ".csv") {
    throw new Error("‚ùå Seuls les fichiers .csv sont autoris√©s");
}

// eslint-disable-next-line security/detect-non-literal-fs-filename
  if (!fs.existsSync(absPath)) {
    throw new Error("‚ùå Le fichier n‚Äôexiste pas :" + absPath);
  }

  return absPath;
}

async function importProducts(filePath) {
  const results = [];

// eslint-disable-next-line security/detect-non-literal-fs-filename
  fs.createReadStream(filePath)
    .pipe(csv())
    .on("data", (data) => results.push(data))
    .on("end", async () => {
      try {
        for (const row of results) {
          // 1. V√©rifie si le store existe d√©j√†
          let store = await prisma.stores.findFirst({
            where: { name: row.store_name },
          });

          // 2. Sinon cr√©e-le
          if (!store) {
            store = await prisma.stores.create({
              data: {
                name: row.store_name,
                address: "Adresse fictive", // √† remplacer si tu as la vraie adresse
                user_id: 1, // ‚ö†Ô∏è adapte √† ton user_id
              },
            });
          }

          // 3. Ajoute le produit
          await prisma.products.create({
            data: {
              name: row.product_name,
              description: row.description,
              price: parseFloat(row.price),
              stock: 100,
              store_id: store.id,
              category: row.category,
            },
          });
        }

        console.log("‚úÖ Import termin√© !");
      } catch (err) {
        console.error("‚ùå Erreur pendant l‚Äôimport :", err);
      } finally {
        await prisma.$disconnect();
      }
    });
}

// üöÄ Lancer avec : node import_products.js imports/pizza-luigi.csv
const filePath = safeFilePath(process.argv[2]);
importProducts(filePath);
